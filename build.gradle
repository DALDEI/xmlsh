
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'net.saliman:gradle-properties-plugin:1.4.4'

  }
}


plugins {
    id "com.jfrog.bintray" version "1.3.1"
}
def getDate() {
    def date = new Date()
    def formattedDate = date.format("yyyy-MM-dd'T'HH:mm:ss")
    return formattedDate
}
ext   {
    xversion_build_date = getDate()
    xversion_release = '2_0_1'
    xversion_version = '2.0.1'
    version_version  = 2.0
}

wrapper {
  gradleVersion='2.8'
}



allprojects {
   apply plugin: 'eclipse'
   apply plugin: 'net.saliman.properties'
   apply plugin: 'project-report'
   apply plugin: 'build-dashboard'
}
task validate()  {
       recommendedProperties names: ["installDir"],
          defaultFile: '$HOME/.gradle/gradle.properties'
       requiredProperties 'awsRepoBucket'
}
subprojects {
    tasks.whenTaskAdded { task ->
     task.dependsOn rootProject.tasks["validate"];
    }
    apply plugin: 'java'
    apply plugin: "maven"
    apply plugin: 'ivy-publish'
    apply plugin: 'maven-publish'
    group = "org.xmlsh"
    version = '2.0'


    apply from: "$rootDir/utils.gradle"


    repositories {
        jcenter()
        maven {
            url "${awsRepoBucket}/maven2"
            credentials(AwsCredentials) {
                accessKey "$awsAccessKey"
                secretKey  "$awsSecretKey"

            }
        }

        ivy {
            url "${awsRepoBucket}/ivyrepo"
            credentials(AwsCredentials) {
                accessKey "$awsAccessKey"
                secretKey  "$awsSecretKey"

            }
       }
    }
    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    jar { manifest.attributes provider: 'David A. Lee' }

    task sourceJar(type: Jar) { from sourceSets.main.allJava }

    sourceSets {
        main {
            java {
                exclude 'src/java'
                exclude "src/main/java"
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar { classifier "sources" }
            }
        }
    }
    clean << {
        println "Cleaning output [libs,bin]... "
        project.delete("libs")
        project.delete("bin")
    }

    // Disable install of sub projects
    tasks.remove( install )
}




/*
 * Convenience task
 *
 */

evaluationDependsOn ":app"
task install( type: Sync  , dependsOn: [ ':validate' , ':app:installDist' ]  ) {
    requiredProperties 'installDir'
    dependsOn rootProject.tasks["validate"]
    dependsOn subprojects.tasks["build"]
     if( rootProject.hasProperty("installDir")) {
      def dest = new File("${-> rootProject.installDir}" )
        from  project(':app').getProperty('installDist')
              into dest
        doFirst {
          println "Installing into: ${dest.absolutePath}"
       }
     }
}

