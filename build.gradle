buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'net.saliman:gradle-properties-plugin:1.4.4'
    classpath 'com.bmuschko:gradle-docker-plugin:3+'
  }
}

apply plugin: 'application'
mainClassName = 'org.xmlsh.sh.shell.Shell'
applicationName = 'xmlsh'

applicationDefaultJvmArgs=[
     '-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl',
     '-Dxmlsh.env.XMODPATH=$APP_HOME']

def getDate() {
    def date = new Date()
    def formattedDate = date.format("yyyy-MM-dd'T'HH:mm:ss")
    return formattedDate
}
ext   {
    xversion_build_date = getDate()
    xversion_release = '2_0_1'
    xversion_version = '2.0.1'
    version_version  = 2.0
}

wrapper {
  gradleVersion='3.0'
}

version = ext.version_version
group = "org.xmlsh"


allprojects {
   apply plugin: 'eclipse'
   apply plugin: 'net.saliman.properties'
   apply plugin: 'project-report'
   apply plugin: 'build-dashboard'
    apply plugin: 'java'
    apply plugin: "maven"
    apply plugin: 'ivy-publish'
    apply plugin: 'maven-publish'
    apply from: "$rootDir/utils.gradle"
    repositories {
        jcenter()
        maven {
            url rootProject.getProperty("xmlsh.awsRepoBucket") + "/maven2"
            credentials(AwsCredentials) {
                accessKey rootProject.getProperty("xmlsh.awsAccessKey")
                secretKey rootProject.getProperty("xmlsh.awsSecretKey")

            }
        }

        ivy {
            url rootProject.getProperty("xmlsh.awsRepoBucket") + "/ivyrepo"
            credentials(AwsCredentials) {
                accessKey rootProject.getProperty("xmlsh.awsAccessKey")
                secretKey rootProject.getProperty("xmlsh.awsSecretKey")

            }
       }
    }
   configurations.all {
      resolutionStrategy.force 'xml-apis:xml-apis:1.4.01'
   }
}

task validate()  {
       recommendedProperties names: ["xmlsh.installDir"],
          defaultFile: '$HOME/.gradle/gradle.properties'
       requiredProperties 'xmlsh.awsRepoBucket'
}
subprojects {
    tasks.whenTaskAdded { task ->
     if( task.name == "install" ) 
        task.dependsOn rootProject.tasks["validate"];
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    jar { manifest.attributes provider: 'David A. Lee' }

    task sourceJar(type: Jar) { from sourceSets.main.allJava }

    sourceSets {
        main {
            java {
                exclude 'src/java'
                exclude "src/main/java"
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar { classifier "sources" }
            }
        }
    }
    clean << {
        println "Cleaning output [libs,bin]... "
        project.delete("libs")
        project.delete("bin")
    }

    // Disable install of sub projects
    tasks.remove( install )

    task allDeps(type: DependencyReportTask) {}
}

test {


}

tasks.remove( jar )

distributions {
	main {
	 baseName = "xmlsh"
         contents {
              exclude "xmlsh-${version}.jar"
        }
   }
}

evaluationDependsOn ":extensions"
evaluationDependsOn ":extensions:aws"
applicationDistribution.
      from(  project(":extensions:aws").installDist  ){
         into("modules/aws")
         exclude { it.file.name in project(":xmlsh-core").configurations.exported.files.name }
      }
evaluationDependsOn ":extensions"
evaluationDependsOn ":extensions:marklogic"
applicationDistribution.
      from( project(":extensions:marklogic").installDist ) {
   into("modules/marklogic")
         exclude { it.file.name in project(":xmlsh-core").configurations.exported.files.name }

}

evaluationDependsOn ":extensions:jstache"
applicationDistribution.
      from( project(":extensions:jstache").installDist ) {
   into("modules/jstache") 
         exclude { it.file.name in project(":xmlsh-core").configurations.exported.files.name }
  
}

run {
    standardInput = System.in
     /* Can pass all the properties: */
    // systemProperties System.getProperties()

    /* Or just each by name: */
    // systemProperty "xmlsh.XLOGLEVEL", "TRACE"
}


apply plugin: 'maven'
uploadArchives {
    repositories {
        maven {
            url rootProject.getProperty("xmlsh.awsRepoBucket") + "/maven2"
            credentials(AwsCredentials) {
               accessKey rootProject.getProperty("xmlsh.awsAccessKey")
               secretKey rootProject.getProperty("xmlsh.awsSecretKey")

            }
        }

    }

  }

/*
 * Convenience task
 *
 */

task installLocal(  type: Sync  , dependsOn: [ ':validate' , 'installDist' ]  ) {
  group 'distribution'
  description "Install application to local directory specified by property xmlsh.installDir"
    requiredProperties 'xmlsh.installDir'
    dependsOn rootProject.tasks["validate"]
    dependsOn subprojects.tasks["build"]
     if( rootProject.hasProperty("xmlsh.installDir")) {
      def dest = new File(rootProject.getProperty("xmlsh.installDir"))
        from  getProperty('installDist')
              into dest
        doFirst {
          println "Installing into: ${dest.absolutePath}"
       }
     }
}

htmlDependencyReport {
  projects = project.allprojects
}


dependencies {
    compile project(":xmlsh-core")
    runtime 'xml-apis:xml-apis:1.4.+'
    compile  'xerces:xercesImpl:2.+'
    //compile 'xml-apis:xml-apis:1.4.+'
    compile 'xml-resolver:xml-resolver:1.2+'
    runtime 'xom:xom:latest.release'
    compile 'net.sf.saxon:Saxon-HE:9.6.+'
    compile 'saxon:saxon:6.5.+'
    testCompile   'junit:junit:4.+'

}

buildscript {
 repositories() { 
   jcenter()
  }

}
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'
version = '1.0'
sourceCompatibility = '1.8'

repositories {
  jcenter()
        maven {
            url rootProject.getProperty("xmlsh.awsRepoBucket") + "/maven2"
            credentials(AwsCredentials) {
                accessKey rootProject.getProperty("xmlsh.awsAccessKey")
                secretKey rootProject.getProperty("xmlsh.awsSecretKey")
            }
        }
}


docker {
   if( System.getenv("DOCKER_HOST") != null )
     url = System.getenv("DOCKER_HOST")

   if( System.getenv("DOCKER_CERT_PATH") != null )
     certPath =  new File( System.getenv("DOCKER_CERT_PATH") )
}

docker {
  javaApplication {
    baseImage = 'daldei/centos7-java8'
    maintainer = 'David lee "dlee@xmlsh.org"'
  }
}

