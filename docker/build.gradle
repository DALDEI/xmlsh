buildscript {
  dependencies {
    classpath 'net.saliman:gradle-properties-plugin:1.4.4'
    classpath 'com.bmuschko:gradle-docker-plugin:3+'
  }
}
/*
plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.4'
}

*/

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'com.bmuschko.docker-java-application'
mainClassName = 'org.xmlsh.sh.shell.Shell'
applicationName = 'xmlsh'

distributions {
	main {
    contents {
      with project(":").distributions.main.contents
    }
	 baseName = "xmlshd"
         contents {
              exclude "xmlshd-${version}.jar"
        }
   }
}

 applicationDefaultJvmArgs=[
     '-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl',
     '-Dxmlsh.env.XMODPATH=$APP_HOME']
     



sourceCompatibility = '1.8'

repositories {
  jcenter()
        maven {
            url rootProject.getProperty("xmlsh.awsRepoBucket") + "/maven2"
            credentials(AwsCredentials) {
                accessKey rootProject.getProperty("xmlsh.awsAccessKey")
                secretKey rootProject.getProperty("xmlsh.awsSecretKey")
            }
        }
}


docker {
   if( System.getenv("DOCKER_HOST") != null )
     url = System.getenv("DOCKER_HOST")

   if( System.getenv("DOCKER_CERT_PATH") != null )
     certPath =  new File( System.getenv("DOCKER_CERT_PATH") )

 registryCredentials { 
    url = 'https://index.docker.io/v1'
    username = registryUser
    password = registryPassword
    email = 'dlee@calldei.com'
  }
} 

docker {
  javaApplication {
    baseImage = 'daldei/centos7-java8'
    maintainer = 'David lee "dlee@xmlsh.org"'
    tag ='daldei/xmlsh:latest'
  }
}
import     com.bmuschko.gradle.docker.tasks.image.*
import     com.bmuschko.gradle.docker.*

import org.gradle.api.plugins.ApplicationPlugin
//project.tasks[DockerJavaApplicationPlugin.DOCKERFILE_TASK_NAME].enabled = false ;


task myBuildDockerfile( type: Dockerfile  ){
  def Tar tarTask = project.tasks[ApplicationPlugin.TASK_DIST_TAR_NAME] 
  outputs.upToDateWhen { false }
  outputs.files project.file("$project.buildDir/docker/Dockerfile")
  //inputs.filesroperty { project.extensions.docker.javaApplication.baseImage } 
  dependsOn { tarTask  }
  
  from { project.extensions.docker.javaApplication.baseImage }
  maintainer { "David A. Lee" }
  addFile( { tarTask.archivePath.name }, {'/'})
  def  eps =  [
     "/bin/bash" , "-c" , "exec /${distTar.archiveName}" - ".${distTar.extension}" + "/unix/xmlsh", "-norc", "-c" ]
  entryPoint {  eps }
  defaultCommand { "xmlsh" }
  doLast {
    println "Ran Dockerfile"
  }
 

}
project.tasks[DockerJavaApplicationPlugin.DOCKERFILE_TASK_NAME].dependsOn myBuildDockerfile

build {
  dependsOn dockerBuildImage
}
